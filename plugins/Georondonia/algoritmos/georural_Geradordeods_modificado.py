# -*- coding: utf-8 -*-

"""
/***************************************************************************
 GeoRondonia
								 A QGIS plugin
 Georreferenciamento de Imóveis Rurais
 Generated by Plugin Builder: http://
							  -------------------
		begin				: 2022-02-13
		copyright			: (C) 2022 by Tiago Prudencio, Leandro França e Maik Rodrigues de Souza
		email				: georondonia@ifro.edu.br
 ***************************************************************************/

/***************************************************************************
 *																		 *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or	 *
 *   (at your option) any later version.								   *
 *																		 *
 ***************************************************************************/
"""

__author__ = 'Tiago Prudencio, Leandro França e Maik Rodrigues de Souza'
__date__ = '2024-03-07'
__copyright__ = '(C) 2024 by Tiago Prudencio, Leandro França e Maik Rodrigues de Souza'

from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (QgsProcessing,
					   QgsProject,
					   QgsProcessingException,
					   QgsGeometry,
                       QgsProcessingParameterNumber,
					   QgsExpressionContextUtils,
					   QgsExpressionContext,
					   QgsProcessingParameterFeatureSource,
					   QgsFeatureRequest,
					   QgsProcessingAlgorithm,
					   QgsExpression,
					   QgsExpressionContext,
					   QgsProcessingParameterFileDestination,
                       QgsProcessingParameterString)  # Importando o novo parâmetro
from ..geocapt.imgs import Imgs
import logging
from math import floor 
from qgis.utils import iface
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QMessageBox
from qgis.core import QgsMessageLog, Qgis
import subprocess
import os
from pathlib import Path
import shutil


class geradordeods(QgsProcessingAlgorithm):

	VERTICE = 'VERTICE'
	LIMITE  = 'LIMITE'
	PARCELA  ='PARCELA'
	OUTPUT = 'OUTPUT'
	DEC_COORD = 'DEC_COORD'
	DEC_PREC = 'DEC_PREC'

	def tr(self, string, string_pt=None):
		if string_pt:
			return QCoreApplication.translate('Processing', string_pt)  # Return the Portuguese translation
		return QCoreApplication.translate('Processing', string)  # Default to English
		return QCoreApplication.translate('Processing', string)

	def createInstance(self):
		return geradordeods()

	def name(self):
		return 'GeoRural2ODS'

	def displayName(self):
		return self.tr('Gerador de ODS (GODS)')

	def group(self):
		return self.tr('')

	def groupId(self):
		return ''

	def icon(self):
		return QIcon(os.path.join(os.path.dirname(os.path.dirname(__file__)), 'images/geoincra_pb.png'))
	
	txt_en = '''Creates a SIGEF ODS spreadsheet, filling it directly through Macros, from the GeoRural database layers worked in QGIS'''
	txt_pt = '''Cria uma planilha ODS do SIGEF, preenchendo-a diretamente através de Macros, a partir das camadas do banco de dados GeoRural trabalhado no QGIS.'''
	figure1 = 'images\logo-geo.png'
	figure2 = 'images\incra-ifro-gov.png'
	
	def shortHelpString(self):
		social_BW = Imgs().social_BW
		footer = '''<div style="text-align: right;">
                      <img src="'''+ os.path.join(os.path.dirname(os.path.dirname(__file__)),self.figure1) +'''"><br>
                      <img src="'''+ os.path.join(os.path.dirname(os.path.dirname(__file__)),self.figure2) +'''">
                      </div>
                      <div align="right">
                      <p align="right">
                      <b>'''+self.tr('Autor: Tiago Prudencio, Leandro França, Maik Rodrigues de Souza, Mychelle Novais Soares, Carolina Potratz Giraldello, Valdir Moura e Ranieli dos Anjos de Souza.')+'''</b>
                      </p>'''+ social_BW + '''</div>
                    </div>'''
		return self.tr(self.txt_en, self.txt_pt) + footer

	def initAlgorithm(self, config=None):
		# ... outros parâmetros ...

		self.addParameter(
			QgsProcessingParameterString(
				'CPF',
				self.tr('CPF do proprietário'),
				defaultValue=''
			)
		)

	def processAlgorithm(self, parameters, context, feedback):
		# ... outros códigos ...

		cpf = self.parameterAsString(parameters, 'CPF', context)

		# ... outros códigos ...

		# Executa a macro passando o CPF
		try:
			subprocess.call(f"{path_libfile} "
							" --invisible "
							f"{path_ods} "
							f'vnd.sun.star.script:qgis_macro.py$create_table?language=Python&location=user&cpf={cpf}'
							)
		except:
			raise QgsProcessingException("Verifique se a versão do seu LibreOffice ou o seu SO estão atualizados!")
```
</create_file>
